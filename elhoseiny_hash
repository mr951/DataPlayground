#include <iostream>
using namespace std;
const int T_S = 1000;
class ListHead {
   public:
      int k, v;
      ListHead *n;
      ListHead(int k, int v) {
         this->k = k;
         this->v = v;
         this->n = NULL;
      }
};
class HashMapTable {
   private:
      ListHead **ht;
   public:
      HashMapTable() {
         ht = new ListHead*[T_S];
         for (int i = 0; i < T_S; i++) {
            ht[i] = NULL;
         }
      }
      int HashFunc(int k){
         return k % T_S;
      }
      void Insert(int k, int v) {
          cout<<"Enter element to be inserted: ";
            cin>>v;
            cout<<"Enter key at which element to be inserted: ";
            cin>>k;
         int hash_v = HashFunc(k);
         if (ht[hash_v] == NULL)
            ht[hash_v] = new ListHead(k, v);
         else {
            ListHead *en = ht[hash_v];
            while (en->n != NULL)
               en = en->n;
            if (en->k == k)
               en->v = v;
            else
               en->n= new ListHead(k, v);
         }
      }
      int SearchKey(int k) {
         int hash_v = HashFunc(k);
         if (ht[hash_v] == NULL)
            return -1;
         else {
            ListHead *en = ht[hash_v];
            while (en != NULL && en->k != k)
               en= en->n;
            if (en == NULL)
               return -1;
            else
               return en->v;
         }
      }
      void Remove(int k) {
         int hash_v = HashFunc(k);
         if (ht[hash_v] != NULL) {
            ListHead *en = ht[hash_v];
            ListHead *p = NULL;
            while (en->n != NULL && en->k != k) {
               p = en;
               en = en->n;
            }
            if (en->k == k) {
               if (p == NULL) {
                  ListHead *n= en->n;
                  delete en;
                  ht[hash_v] = n;
               }
               else {
                  ListHead *n = en->n;
                  delete en;
                  p->n = n;
               }
            }
         }
      }
      ~HashMapTable() {
         delete[] ht;
      }
   };

int main() {
   HashMapTable hash;
   int k, v;
   char c;
   while(1) {

	char c ;
	do{
		cout<<"What are the operations that you need to do ?"<<endl ;

		cout<<"A. add some random elements."<<endl
		<<"B. Add an element."<<endl
		<<"C. Delete an element ."<<endl
		<<"D. Delete the first N elements."<<endl
		<<"E. Find an element."<<endl
		<<"F. Display hash"<<endl
		<<"G. Use the current hash to get unique numbers from the previous list. (Bonus)"<<endl
		<<"H. Count the occurrence of an element."<<endl
		<<"1. Main Menu"<<endl
		<<"0. Exit application."<<endl<<endl
		<<"Please make a selection: " ;
		cin>>c ;

		if(c>='a')	c-=('a'-'A') ;
		switch(c)
		{
			case 'B' : hash.Insert(k, v);
			break ;

			case 'C' :
            cout<<"Enter key of the element to be deleted: ";
            cin>>k;
            if (hash.SearchKey(k) == -1)
               cout<<"Key "<<k<<" is empty"<<endl;
            else {
               hash.Remove(k);
               cout<<"Entry Removed"<<endl;
            }
			break ;

			case 'E':
                cout<<"Enter key of the element to be searched: ";
            cin>>k;
            if (hash.SearchKey(k) == -1)
               cout<<"No element found at key "<<k<<endl;
            else {
               cout<<"Elements at key "<<k<<" : ";
               cout<<hash.SearchKey(k)<<endl;
            }
		}

	}while(c!='1' && c!='0') ;

}
       return 0;
}
